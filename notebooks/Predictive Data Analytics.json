{"paragraphs":[{"text":"%spark2\n\nimport pyspark.sql.functions\nfrom pyspark.sql import SparkSession\nfrom pyspark.ml import Pipeline\n\n\nspark = SparkSession.builder\\\n    .appName(\"BDT Project\")\\\n    .master(\"local[*]\")\\\n    .config(\"hive.metastore.uris\", \"thrift://sandbox-hdp.hortonworks.com:9083\")\\\n    .config(\"spark.sql.catalogImplementation\",\"hive\")\\\n    .config(\"spark.sql.avro.compression.codec\", \"snappy\")\\\n    .config(\"spark.jars\", \"file:///usr/hdp/current/hive-client/lib/hive-metastore-1.2.1000.2.6.5.0-292.jar,file:///usr/hdp/current/hive-client/lib/hive-exec-1.2.1000.2.6.5.0-292.jar\")\\\n    .config(\"spark.jars.packages\",\"org.apache.spark:spark-avro_2.12:3.0.3\")\\\n    .enableHiveSupport()\\\n    .getOrCreate()\n\n\nsc = spark.sparkContext\n\nprint(sc)","user":"anonymous","dateUpdated":"2023-05-24T22:24:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:23: error: not found: value pyspark\n       import pyspark.sql.functions\n              ^\n"}]},"apps":[],"jobName":"paragraph_1684964352425_-456613701","id":"20230524-213912_777385459","dateCreated":"2023-05-24T21:39:12+0000","dateStarted":"2023-05-24T22:24:05+0000","dateFinished":"2023-05-24T22:24:06+0000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12853"},{"text":"%spark2\nprint(spark.catalog.listDatabases())","user":"anonymous","dateUpdated":"2023-05-24T21:44:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[name: string, description: string ... 1 more field]"}]},"apps":[],"jobName":"paragraph_1684961512174_-1897988705","id":"20230524-205152_1642892578","dateCreated":"2023-05-24T20:51:52+0000","dateStarted":"2023-05-24T21:24:13+0000","dateFinished":"2023-05-24T21:24:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12854"},{"text":"%spark2\nprint(spark.catalog.listTables(\"project\"))","user":"anonymous","dateUpdated":"2023-05-24T21:44:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[name: string, database: string ... 3 more fields]"}]},"apps":[],"jobName":"paragraph_1684963399177_-1704747355","id":"20230524-212319_653182894","dateCreated":"2023-05-24T21:23:19+0000","dateStarted":"2023-05-24T21:24:15+0000","dateFinished":"2023-05-24T21:24:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12855"},{"text":"%spark2\ntrain = spark.read.format(\"avro\").table('project.train')","user":"anonymous","dateUpdated":"2023-05-24T22:25:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1684963422344_-1929794814","id":"20230524-212342_1232433470","dateCreated":"2023-05-24T21:23:42+0000","dateStarted":"2023-05-24T21:33:28+0000","dateFinished":"2023-05-24T21:33:28+0000","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:12856"},{"text":"%spark2\n\nimport pandas as pd\nimport numpy as np\n\n#create a new feature 'missing' which is the count of missing values in each row\ndata['missing'] = (data==-1).sum(axis=1)","user":"anonymous","dateUpdated":"2023-05-24T21:44:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1684963440151_-275728644","id":"20230524-212400_1148977806","dateCreated":"2023-05-24T21:24:00+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:12857"},{"text":"%spark2\n\nfrom sklearn.model_selection import train_test_split\n\n#define the features and the target\nX = data.drop('target', axis=1)\ny = data['target']\n\n#split the data into training and validation sets\n# We use stratified sampling to ensure that the training and validation sets have the same proportion of class labels as the original dataset\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, stratify=y, random_state=42)\n\n#display the shapes of the training and validation sets\nprint('Training set:', X_train.shape, y_train.shape)\nprint('Validation set:', X_val.shape, y_val.shape)","user":"anonymous","dateUpdated":"2023-05-24T21:44:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1684964062094_-985869488","id":"20230524-213422_533622919","dateCreated":"2023-05-24T21:34:22+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:12858"},{"text":"%md\ndealing with categorical features","user":"anonymous","dateUpdated":"2023-05-24T21:43:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>dealing with categorical features</p>\n"}]},"apps":[],"jobName":"paragraph_1684964557519_-1142546013","id":"20230524-214237_1458825508","dateCreated":"2023-05-24T21:42:37+0000","dateStarted":"2023-05-24T21:43:09+0000","dateFinished":"2023-05-24T21:43:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12859"},{"text":"%spark2\n\nimport pandas as pd\n\ndef one_hot_encoding(train, test, cat_features):\n    temp = pd.concat([train, test])\n    temp = pd.get_dummies(temp, columns = cat_features)\n    train = temp.iloc[:train.shape[0],:]\n    test = temp.iloc[train.shape[0]:, :]\n    return train, test\n\n# Define the categorical features\ncat_features = ['ps_ind_02_cat', 'ps_ind_04_cat', 'ps_ind_05_cat', 'ps_car_01_cat', 'ps_car_02_cat', 'ps_car_03_cat', 'ps_car_04_cat', 'ps_car_05_cat', 'ps_car_06_cat', 'ps_car_07_cat', 'ps_car_08_cat', 'ps_car_09_cat', 'ps_car_10_cat', 'ps_car_11_cat']\n\n# Apply one-hot encoding to the categorical features\nX_train, X_val = one_hot_encoding(X_train, X_val, cat_features)\n","user":"anonymous","dateUpdated":"2023-05-24T21:44:35+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1684964448928_-770863252","id":"20230524-214048_965138755","dateCreated":"2023-05-24T21:40:48+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:12860"},{"text":"%md\ndealing with categorical features","user":"anonymous","dateUpdated":"2023-05-24T21:44:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>dealing with categorical features</p>\n"}]},"apps":[],"jobName":"paragraph_1684964624526_-687480010","id":"20230524-214344_33110456","dateCreated":"2023-05-24T21:43:44+0000","dateStarted":"2023-05-24T21:44:36+0000","dateFinished":"2023-05-24T21:44:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12861"},{"text":"%spark2\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_val = scaler.transform(X_val)","user":"anonymous","dateUpdated":"2023-05-24T21:44:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1684964599216_-907587029","id":"20230524-214319_1582403733","dateCreated":"2023-05-24T21:43:19+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:12862"},{"text":"%md\n##Modelling","user":"anonymous","dateUpdated":"2023-05-24T22:28:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Modelling</h2>\n"}]},"apps":[],"jobName":"paragraph_1684965686629_-1777769213","id":"20230524-220126_1948706966","dateCreated":"2023-05-24T22:01:26+0000","dateStarted":"2023-05-24T22:28:47+0000","dateFinished":"2023-05-24T22:28:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12863"},{"text":"%spark2\n\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.classification import RandomForestClassifier, NaiveBayes\nfrom pyspark.ml.evaluation import BinaryClassificationEvaluator, MulticlassClassificationEvaluator\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\n\n#initialize classifiers\nrf = RandomForestClassifier(labelCol=\"label\", featuresCol=\"features\")\nnb = NaiveBayes(labelCol=\"label\", featuresCol=\"features\")\n\n#build the pipeline\npipeline_rf = Pipeline(stages=[rf])\npipeline_nb = Pipeline(stages=[nb])\n\n#set up the parameter grid\nparamGrid_rf = ParamGridBuilder().addGrid(rf.numTrees, [10, 20, 30]).addGrid(rf.maxDepth, [5, 10, 15]).build()\nparamGrid_nb = ParamGridBuilder().addGrid(nb.smoothing, [0.0, 0.2, 0.4]).build()\n\n#set up the cross-validation\ncrossval_rf = CrossValidator(estimator=pipeline_rf,\n                             estimatorParamMaps=paramGrid_rf,\n                             evaluator=BinaryClassificationEvaluator(),\n                             numFolds=4)\n\ncrossval_nb = CrossValidator(estimator=pipeline_nb,\n                             estimatorParamMaps=paramGrid_nb,\n                             evaluator=MulticlassClassificationEvaluator(),\n                             numFolds=4)\n                             \n#fit the models\ncvModel_rf = crossval_rf.fit(trainingData)\ncvModel_nb = crossval_nb.fit(trainingData)\n\n#make predictions\npredictions_rf = cvModel_rf.transform(testData)\npredictions_nb = cvModel_nb.transform(testData)\n\n#evaluate the models\nevaluator_rf = BinaryClassificationEvaluator()\nevaluator_nb = MulticlassClassificationEvaluator(metricName=\"accuracy\")\n\nprint(\"Random Forest - Area Under ROC: \" + str(evaluator_rf.evaluate(predictions_rf, {evaluator_rf.metricName: \"areaUnderROC\"})))\nprint(\"Random Forest - Area Under PR: \" + str(evaluator_rf.evaluate(predictions_rf, {evaluator_rf.metricName: \"areaUnderPR\"})))\nprint(\"Naive Bayes - Accuracy: \" + str(evaluator_nb.evaluate(predictions_nb)))\nprint(\"Naive Bayes - F1: \" + str(evaluator_nb.evaluate(predictions_nb, {evaluator_nb.metricName: \"f1\"})))","user":"anonymous","dateUpdated":"2023-05-24T22:11:50+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:1: error: ';' expected but '.' found.\nfrom pyspark.ml import Pipeline\n            ^\n"}]},"apps":[],"jobName":"paragraph_1684964684535_-1678364958","id":"20230524-214444_385206302","dateCreated":"2023-05-24T21:44:44+0000","dateStarted":"2023-05-24T22:01:23+0000","dateFinished":"2023-05-24T22:01:23+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:12864"},{"text":"%md\n##Prediction\n","user":"anonymous","dateUpdated":"2023-05-24T22:38:28+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1684965668621_-720109811","id":"20230524-220108_1898633186","dateCreated":"2023-05-24T22:01:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12865","dateFinished":"2023-05-24T22:38:28+0000","dateStarted":"2023-05-24T22:38:28+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Prediction</h2>\n"}]}},{"text":"%spark2\nsample = spark.createDataFrame([(0, test)], [\"id\"])\n\n# Transform the data sample using the same pipeline used for training\nsample_transformed = pipeline.transform(sample)\nprediction = model.transform(sample_transformed)\nprediction.select(\"prediction\").show()","user":"anonymous","dateUpdated":"2023-05-24T22:41:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1684967894735_-1969819687","id":"20230524-223814_168293156","dateCreated":"2023-05-24T22:38:14+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13181"}],"name":"Predictive Data Analytics","id":"2J1J9RQRP","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}